import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import $axios from "@/utils/axios";
import generateNonce from "@/utils/generateNonce";

export interface AuthState {
  nonce: string;
  public_key: string;
  token: string;
  username: string;
  status: "idle" | "loading" | "failed";
  errors: [{ message: string }] | null;
}

export interface SignUpPayload {
  username: string;
  wallet_type: string;
  public_key: string;
  signature: any;
  nonce: string;
}

export interface SignInPayload {
  wallet_type: string;
  public_key: string;
  signature: any;
  nonce: string;
}

const initialState: AuthState = {
  nonce: generateNonce(),
  public_key: "",
  token: "",
  username: "",
  status: "idle",
  errors: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const signupWithPhantom = createAsyncThunk(
  "auth/signupWithPhantom",
  async (payload: SignUpPayload, thunkAPI) =>
    await $axios
      .post("/auth/signup-with-phantom", payload)
      .then((response) => response)
      .catch((error) => thunkAPI.rejectWithValue(error.response.data)),
);

export const signinWithPhantom = createAsyncThunk(
  "auth/signinWithPhantom",
  async (payload: SignInPayload) => {
    const response = await $axios.post("/auth/signin-with-phantom", payload);
    return response.data;
  },
);

export const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    setAddress: (state, action: PayloadAction<string>) => {
      state.public_key = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(signinWithPhantom.pending, (state) => {
        state.status = "loading";
        state.errors = null;
      })
      .addCase(signinWithPhantom.fulfilled, (state, action) => {
        state.status = "idle";
        state.token += action.payload.token;
      })
      .addCase(signupWithPhantom.rejected, (state, action) => {
        state.status = "idle";
        state.errors = action.payload.errors;
      });
  },
});

export const { setAddress } = authSlice.actions;

export default authSlice.reducer;
